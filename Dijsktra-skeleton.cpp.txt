#include <iostream>
#include <vector>
#include <queue>
#include <climits>

void dijkstra(const std::vector<std::vector<int>>& graph, int source) {
    int numVertices = graph.size();

    // Create a priority queue to store vertices and their distances
    std::priority_queue<std::pair<int, int>, std::vector<std::pair<int, int>>, std::greater<std::pair<int, int>>> pq;

    // Create a vector to store distances. Initialize all distances to INT_MAX.
    std::vector<int> distance(numVertices, INT_MAX);

    
}

int main() {
    std::vector<std::vector<int>> graph = {
        {0, 2, INT_MAX, 4, INT_MAX},
        {INT_MAX, 0, 1, 3, INT_MAX},
        {INT_MAX, INT_MAX, 0, INT_MAX, 1},
        {INT_MAX, INT_MAX, INT_MAX, 0, INT_MAX},
        {INT_MAX, INT_MAX, INT_MAX, 2, 0}
    };

    dijkstra(graph, 0);

    return 0;
}